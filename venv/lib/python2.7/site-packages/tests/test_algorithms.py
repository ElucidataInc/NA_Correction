import os

import numpy as npt
import pandas as pd
import pytest

from datum import algorithms
from datum import custom_exceptions
import test_input.constants as cs


@pytest.mark.parametrize("path, expectations", [
    pytest.mark.raises((cs.input_file_path_true, None),
                       exception=custom_exceptions.InvalidMavenError),
    (cs.file_path_msms, 'msms'),
    (cs.maven_df_path, 'ms')
])
def test_get_maven_file_type(path, expectations):
    """
    Test to check files from maven if true return type of file
    """
    result = algorithms.get_maven_file_type(path)
    assert result == expectations


def test_convert_maven_to_required_df_na_lcms():
    """ Test to check maven outpout is converted into NA LCMS input"""
    df, logs = algorithms.convert_maven_to_required_df(cs.maven_df_path,
                                                       'na_lcms')
    expected_column_list = ['Label', 'Name', 'Formula', '091215_0i',
                            '091215_0M', '091215_1i', '091215_1M', '091215_3i']
    expected_logs = {'errors': [], 'warnings': {'action': [], 'message': []}}
    assert all(
        [npt.array_equal(df.columns.values, expected_column_list), logs ==
         expected_logs])


def test_convert_maven_to_required_df_quant_lcms():
    """ Test to check maven outpout is converted into quant LCMS input"""
    df, logs = algorithms.convert_maven_to_required_df(cs.maven_df_path,
                                                       'quant_lcms')
    expected_column_list = ['Component Name', 'Original Filename', 'Area',
                            'Sample Name', 'Mass Info']
    expected_logs = {'errors': [], 'warnings': {'action': [], 'message': []}}
    assert all(
        [npt.array_equal(df.columns.values, expected_column_list), logs ==
         expected_logs])


def test_convert_maven_to_required_df_na_msms():
    """ Test to check maven outpout is converted into NA LCMSMS input"""
    df, logs = algorithms.convert_maven_to_required_df(cs.file_path_msms,
                                                       'na_msms')
    expected_column_list = ['Component Name', 'Original Filename', 'Area',
                            'Method', 'Mass Info']
    expected_logs = {'errors': [], 'warnings': {'action': [], 'message': []}}
    assert all([npt.array_equal(df[0].columns.values, expected_column_list),
                logs ==
                expected_logs])


def test_convert_maven_to_required_df_quant_msms():
    """ Test to check maven outpout is converted into Quant LCMSMS input"""
    df, logs = algorithms.convert_maven_to_required_df(cs.file_path_msms,
                                                       'quant_msms')
    expected_column_list = ['Component Name', 'Original Filename', 'Area',
                            'Mass Info', 'Sample Name']
    expected_logs = {'errors': [], 'warnings': {'action': [], 'message': []}}
    assert all(
        [npt.array_equal(df.columns.values, expected_column_list), logs ==
         expected_logs])


def test_quant_create_fragment_mapping_ms():
    """ Test to check if the mapped df is rightly being generated"""
    input_df = algorithms.convert_maven_to_required_df(cs.maven_df_path, 'quant_lcms')
    df = algorithms.quant_create_fragment_mapping(input_df[0])
    df_dict = {'Component Name': ['guanosine', '1-Methyladenosine',
            '6-phospho-D-gluconate', 'inosine'], 'Unlabeled Fragment': ['guanosine', '1-Methyladenosine',
                    '6-phospho-D-gluconate', 'inosine']}
    expected_df = pd.DataFrame(df_dict)
    assert npt.array_equal(df[0], expected_df)


def test_quant_create_fragment_mapping_msms():
    """ Test to check if the mapped df is rightly being generated"""
    input_df = algorithms.convert_maven_to_required_df(cs.file_path_msms, 'quant_msms')
    df = algorithms.quant_create_fragment_mapping(input_df[0])
    df_dict = {'Component Name': ['Succinate 121/76', 'Succcinate 121/103',
            'Succinate 120/76'], 'Unlabeled Fragment': ['Succinate 117/73', 'Succinate 117/99',
                    'Succinate 117/73']}
    expected_df = pd.DataFrame(df_dict)
    assert list(df[0]) == list(expected_df.columns)


def test_na_create_fragment_mapping():
    """ Test to check if the mapped df is rightly
    being generated for NA correction"""
    input_df = pd.read_csv(cs.na_msms_test_file)
    df = algorithms.na_create_fragment_mapping(input_df)
    df_dict = {'Component Name': ['Citrate 191/111', 'Citrate 191/111'],
        'Unlabeled Fragment': ['Citrate 191/111', 'Citrate 191/111'],
        'Formula': ['C5H3O3', 'C5H3O3'], 'Isotopic Tracer': ['C13', 'C13'],
        'Parent Formula': ['C6H7O7', 'C6H7O7']}
    expected_df = pd.DataFrame(df_dict)
    expected_df = expected_df[['Component Name', 'Unlabeled Fragment',
    'Formula', 'Isotopic Tracer', 'Parent Formula']]
    assert list(df[0]) == list(expected_df.columns)

def test_pvd_create_metabolite_mapping():
    """ Test to check if the mapped df is rightly
    being generated for NA correction"""
    input_df = pd.read_csv(cs.pvd_test_file)
    df = algorithms.pvd_create_metabolite_mapping(input_df)
    df_dict = {'name': ['L-Cystathionine', 'Pantothenic acid'],
        'hmdb_id': ['HMDB00099', 'HMDB00210'],
        'kegg_id': [0,0], 'id': ['HMDB00099', 'HMDB00210']}
    expected_df = pd.DataFrame(df_dict)
    expected_df = expected_df[['name', 'hmdb_id', 'kegg_id', 'id']]
    assert npt.array_equal(df, expected_df)
