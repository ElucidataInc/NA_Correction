import numpy as npt
import pandas as pd
import pytest

from datum import custom_exceptions
from datum import helpers
import test_input.constants as cs


@pytest.mark.parametrize("path, expectations", [
    pytest.mark.raises((cs.input_file_path_error_empty, None),
                       exception=custom_exceptions.FileEmptyError),
    pytest.mark.raises((cs.input_file_path_error_path, None),
                       exception=custom_exceptions.FileExistError),
    (cs.input_file_path_true, True),
])
def test_validate_input_file(path, expectations):
    """
    Test to check input files and raises exception if file is empty or
    file path does not exist
    """
    result = helpers.validate_input_file(path)
    assert result == expectations


def test_read_file():
    """ Test case to check that output is dataframe.  """
    output = helpers.read_file(cs.file_path_msms)
    if not isinstance(output, pd.DataFrame):
        pytest.fail("Output is not Df")
    else:
        print "Success"


@pytest.mark.parametrize('path', ['','file', cs.file_not_exist_ext])
def test_read_files_exc(path):
    """
    Test case to check the exception raised when path param is file extension Error.
    """
    with pytest.raises(custom_exceptions.FileExtensionError):
        helpers.read_file(path)


def test_fill_missing():
    """
    Test to check missing values are filled with zero
    """
    df = pd.DataFrame({'metaGroupId': [0, npt.nan],
                       'groupId': [1, 2]})
    df = helpers.fill_missing(df)
    expected_df = pd.DataFrame({'metaGroupId': [0, 0],
                                'groupId': [1, 2]})
    assert npt.array_equal(df, expected_df)


def test_missing_data_report():
    """
    Test to create ceport if data is missing in dataframe.
    """
    missing_df = pd.DataFrame({'row_number' : [1], 'column_name' :
        ['metaGroupId'], 'state' : ['missing']})
    logs = {'errors': [], 'warnings': {'action': [], 'message': []}}
    logs = helpers.missing_data_report(missing_df, logs)
    assert logs == {'errors': [], 'warnings': {
        'action': ['Action Taken : Missing value of columns replaced with 0'],
        'message': ['Row Number 1: column metaGroupId has missing value']}}


def test_check_maven_df_with_olmonk_error():
    """
    Test to check df with olmonk
    """
    df, logs = helpers.check_maven_df_with_olmonk(cs.maven_df_path_error)
    expected_df = pd.DataFrame()
    expected_logs = {'errors': [
        'Row Number <b>10</b> : column <b>091215_1i</b> has <b>negative</b> value'],
        'warnings': {'action': [
            'Action Taken : Missing value of columns replaced with 0',
            'Action Taken : Missing value of columns replaced with 0'],
            'message': [
                'Row Number 21: column 091215_0i has missing value',
                'Row Number 21: column 091215_1i has missing value']}}
    assert all([npt.array_equal(df, expected_df), logs == expected_logs])


def test_check_maven_df_with_olmonk_ms():
    """
        Test to check df with olmonk
     """
    df, logs = helpers.check_maven_df_with_olmonk(cs.maven_df_path)
    expected_column_list = ['label', 'metaGroupId', 'groupId', 'goodPeakCount',
                            'medMz', 'medRt', 'maxQuality', 'note', 'compound',
                            'compoundId', 'formula', 'expectedRtDiff',
                            'ppmDiff', 'parent', '091215_0i', '091215_0M',
                            '091215_1i', '091215_1M', '091215_3i']
    expected_logs = {'errors': [], 'warnings': {'action': [], 'message': []}}
    assert all(
        [npt.array_equal(df.columns.values, expected_column_list), logs ==
         expected_logs])


def test_check_maven_df_with_olmonk_msms():
    """
        Test to check df with olmonk
    """
    df, logs = helpers.check_maven_df_with_olmonk(cs.file_path_msms)
    expected_column_list = ['groupId', 'compound', 'compoundId', 'sample',
                            'peakMz', 'medianMz', 'baseMz', 'rt', 'rtmin',
                            'rtmax', 'quality', 'peakIntensity', 'peakArea',
                            'peakAreaTop', 'peakAreaCorrected', 'noNoiseObs',
                            'signalBaseLineRatio', 'fromBlankSample']
    expected_logs = {'errors': [], 'warnings': {'action': [], 'message': []}}
    assert all(
        [npt.array_equal(df.columns.values, expected_column_list), logs ==
         expected_logs])


@pytest.mark.parametrize("df, expectations", [
    pytest.mark.raises((pd.DataFrame(), None),
                       exception=custom_exceptions.InvalidMavenError),
    (pd.DataFrame(columns= ['groupId', 'compound', 'compoundId', 'sample',
                            'peakMz', 'medianMz', 'baseMz', 'rt', 'rtmin',
                            'rtmax', 'quality', 'peakIntensity', 'peakArea',
                            'peakAreaTop', 'peakAreaCorrected', 'noNoiseObs',
                            'signalBaseLineRatio', 'fromBlankSample']), 'msms'),
    (pd.DataFrame(columns= ['compound', 'note', 'label', 'metaGroupId', 'groupId',
                     'maxQuality', 'compoundId', 'expectedRtDiff',
                     'ppmDiff', 'medRt', 'parent', 'goodPeakCount',
                     'medMz', 'formula']), 'ms'),
])
def test_check_file_type(df, expectations):
    """
    Test to check file type from maven if not from maven then raises
    InvalidMavenError
    """
    result = helpers.check_file_type(df)
    assert result == expectations

