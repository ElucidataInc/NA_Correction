"""
In this module Action class is defined. This class will help
taking action on the df according to the state of invalid rows.
"""
# TODO: Write better description.
from collections import namedtuple

import constants as const
import helpers

LOGS = namedtuple('logs', 'warnings errors')
WARNING = namedtuple('warn', 'message action')

class Action(object):
    """
    Instances of this class can be configured to take action
    according to validation report.
    """
    def __init__(self, df, report, required_column_list):
        self.df = df
        self.report = report.report_in_dict_form
        self.action_report = {}
        self.row_with_err = list(set(report.row_having_err))
        self.row_with_warning = list(set(report.row_having_warning))
        self.required_column_list = required_column_list
        warnings = WARNING(message=[], action=[])
        errors = []
        self.logs = LOGS(warnings=warnings, errors=errors)
        self.corrected_df = helpers.get_df()
        self.is_error = report.is_error

    def generate_action(self):
        """
        This function generates the action to be taken for each validation
        result and save the action report as key value pair where key is
        the row number.

        for example:

        if result
            {'1':{'warning': [['label','invalid_label],['formula','
            invalid_formula']], 'errors':[]},'4':{'warning':[
            ['label','invalid_label']],'errors':[]},'19':{'warning':[],
            'errors':['Sample1','negative]}}

        final result:
            {'1':{'warning': [['label','invalid_label','DROP'],['formula',
            'invalid_formula','DROP']],'errors':[]},'4':{'warning':[[
            'label','invalid_label','DROP']],'errors':[]},'19':{'warning':
            [],'errors':['Sample1','negative','STOP']}}
        """
        for row in self.row_with_warning:
            self.append_action_to_report(row, const.VALIDATION_WARNING)

        for row in self.row_with_err:
            self.append_action_to_report(row, const.VALIDATION_ERROR)

    def append_action_to_report(self, row, validation_type):
        """
        This is to append the action corresponding for each row
        in the validation report.
        """
        if validation_type == const.VALIDATION_WARNING:
            for each_result in self.report[row][const.VALIDATION_WARNING]:
                each_result.append(self.get_action_name_new(each_result))
        elif validation_type == const.VALIDATION_ERROR:
            for each_result in self.report[row][const.VALIDATION_ERROR]:
                each_result.append(self.get_action_name_new(each_result))

    def get_action_name_new(self, validation_result):
        """
        This will return action name which is calculated on basis of
        predefined conditions.

        :param validation_result: dict having state and column name value
        :return: action name according to state and column
        """
        column_name = validation_result[0]
        state = validation_result[1]

        if state in const.WARNING_STATE.keys():
            action = const.WARNING_STATE[state]
        else:
            action = const.VALIDATION_ACTION_STOP

        return action

    def get_action_name(self, validation_result):
        """
        This will return action name which is calculated on basis of
        predefined conditions.

        :param validation_result: dict having state and column name value
        :return: action name according to state and column
        """
        # TODO : make it more genaralise
        column_name = validation_result[0]
        state = validation_result[1]

        if state == const.MISSING_STATE:

            if column_name in self.required_column_list:
                action = const.VALIDATION_ACTION_DROP
            else:
                action = const.VALIDATION_ACTION_FILL_NA

        elif state == const.DUPLICATE_STATE:
            action = const.VALIDATION_ACTION_DROP

        else:
            action = const.VALIDATION_ACTION_STOP

        return action

    def generate_action_report(self):
        """
        This function with the help of validation report generate action report.
        which dictates what action is to be taken on row i.e it decides if the row
        is being dropped, or individual column action is to be taken. If there is any
        error then simply it save STOP_TOOL and halts there.

        for ex: result:
            {'1':{'warning': [['label','invalid_label','DROP'],['formula',
            'invalid_formula','DROP']],'errors':[]},
            '4':{'warning':[['label','invalid_label','DROP']],'errors':[]},
            '19':{'warning':[],'errors':['Sample1','negative','STOP']}}

        action = {'action': 'STOP_TOOL}

        if  result:
            {'1':{'warning': [['label','invalid_label','DROP'],['formula',
            'invalid_formula','DROP']],'errors':[]},
            '4':{'warning':[['label','invalid_label','DROP']],'errors':[]} }
        action :
            {'action': 'ROW_WISE_ACTION',
            '1': [{'column': 'label', 'state': 'invalid_label, 'action': 'DROP'},
            {'column': 'Formula', 'state': 'invalid_formula, 'action': 'DROP'}],
            '4': [{'column': 'label', 'state': 'invalid_label, 'action': 'DROP'}]}

        :return: dict object: action list for row wise
        """
        if self.row_with_err:
            self.action_report[const.VALIDATION_ACTION] = const.VALIDATION_ACTION_STOP

        elif self.row_with_warning:
            self.action_report[const.VALIDATION_ACTION] = const.VALIDATION_ACTION_ROW_WISE

            for row in self.row_with_warning:
                self.append_action(row)
        else:
            self.action_report[const.VALIDATION_ACTION] = const.VALIDATION_ACTION_OK

    def append_action(self, row):
        """
        This method append action for each row to  action report.
        """
        column_state_action_as_list = []
        for each_warning in self.report[row][const.VALIDATION_WARNING]:
            column_state_action_as_list.append(self.get_action_object(each_warning))
        self.action_report[row] = column_state_action_as_list

    @staticmethod
    def get_action_object(each_result):
        """
        This will give action object for each result for example.

        result = ['label','missing','drop']
        action_object = {'column': 'label',
                         'state': 'missing',
                         'action':'DROP'}
        """

        action_object = {const.VALIDATION_COLUMN_NAME: each_result[0],
                         const.COLUMN_STATE: each_result[1],
                         const.VALIDATION_ACTION: each_result[2]}
        return action_object

    def generate_logs(self):
        """
        This function generates the logs of validation report and action which is
        taken in case of warning.
        for ex : if result = {'1':{'warning': [['label','invalid_label','DROP'],['formula',
                                            'invalid_formula','DROP']],'errors':[]},
                              '4':{'warning':   [['label','invalid_label','DROP']],'errors':[]}
        logs will be = { 'warning': { 'action': [],
                       'message': ['ROW number 1: column label has invalid label,
                        column formula has invalid]}'errors' : []}
        :return: dict where keys are error and warnings, and values are list of
        messages.
        """
        self.generate_action()
        self.generate_action_report()
        for row in self.report.keys():

            if self.report[row][const.VALIDATION_ERROR]:
                msg = []
                for error in self.report[row][const.VALIDATION_ERROR]:
                    msg.append("column <b>{c[0]}</b> has <b>{c[1]}</b> value".format(c=error))
                final_msg = "Row Number <b>%i</b> : " % row + " , ".join(msg)
                self.logs.errors.append(final_msg)

            elif self.report[row][const.VALIDATION_WARNING]:
                msg = []
                for warning in self.report[row][const.VALIDATION_WARNING]:
                    msg.append("column <b>{c[0]}</b> has <b>{c[1]}</b> value".format(c=warning))
                final_msg = "Row Number <b>%i</b> : " % row + " , ".join(msg)
                self.logs.warnings.message.append(final_msg)


    def take_action(self):
        """
        With the help of action report this function perform actions on the
        row also it returns the filtered data frame after performing the action.

        TODO: now using if and else to take the action because only two actions
        are there , need to change this when there are number of actions.

        for ex: action = {'action': 'ROW_WISE_ACTION',
                          '1': [{'column': 'label', 'state': 'invalid_label, 'action': 'DROP'},
                                {'column': 'Formula', 'state': 'invalid_formula, 'action': 'DROP'}],
                          '4': [{'column': 'label', 'state': 'invalid_label, 'action': 'DROP'}]}
        actions performed are drop row 1, drop row 4.
        In line 203: We need break because if the row is dropped there is no need
        of other action
        """
        corrected_df = helpers.get_df()
        list_of_rows_to_drop = []
        temp_action_msg = []

        if not self.is_error:
            temp_df = self.df.copy()
            for each_row in self.row_with_warning:

                for each_action in self.action_report[each_row]:

                    if each_action[const.VALIDATION_ACTION] == const.VALIDATION_ACTION_DROP:
                        list_of_rows_to_drop.append(each_row)
                        temp_action_msg = const.VALIDATION_MSG_ROW_DROPPED
                        break
                    else:
                        temp_df.set_value(each_row, each_action[const.VALIDATION_COLUMN_NAME], 0)
                        temp_action_msg = const.VALIDATION_MSG_FILL_NA

                self.logs.warnings.action.append(temp_action_msg)
            corrected_df = self.action_drop_rows(temp_df, list_of_rows_to_drop)
        self.corrected_df = corrected_df

    @staticmethod
    def action_drop_rows(df, row_list):
        """
        This is used to drop the rows in a df. .
        :param df: DF on which action is to be performed
        :param row_list: list of row to dropped
        return: DF after row is dropped
        """
        df.drop(df.index[row_list], inplace=True)
        return df
