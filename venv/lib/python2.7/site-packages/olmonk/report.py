"""
This module provides utilities for creating reports of validation
checks.
"""
from collections import namedtuple

import pandas as pd

import constants as const
import helpers


class Report(object):
    """
    Instances of this class can be configured to create report
    for validation checks. Also different methods to manipulate
    the report format.
    """

    def __init__(self):
        # TODO: Documentation

        self.report = self.get_empty_report()
        self.duplicate_column_report = helpers.get_df()
        self.missing_report = helpers.get_df()
        self.duplicate_report = helpers.get_df()
        self.numerical_report = helpers.get_df()
        self.formula_report = helpers.get_df()
        self.value_in_constant_report = helpers.get_df()
        self.pattern_match_report = helpers.get_df()
        self.specific_check_report = helpers.get_df()
        self.invalid_row_lst = []
        self.row_having_err = []
        self.row_having_warning = []
        self.report_in_dict_form = {}
        self.is_error = False

    def get_empty_report(self):
        """
        This method returns an empty DataFrame with columns 
        COLUMN_ROW, COLUMN_NAME, COLUMN_STATE
        :return: df
        """
        df = pd.DataFrame()
        return df

    def append_report_to_global_report(self, validation_report):
        """
        Method to append single validation report to global report.
        TODO: change append implementation without using inplace
        :param validation_report: Report from validation function.
        """
        self.report = self.report.append(validation_report)

    def get_report_df(self):
        """
        This method combines all the report and returns it in the
        form of data frame.
        """
        self.append_report_to_global_report(self.missing_report)
        self.append_report_to_global_report(self.duplicate_report)
        self.append_report_to_global_report(self.numerical_report)
        self.append_report_to_global_report(self.formula_report)
        self.append_report_to_global_report(self.value_in_constant_report)
        self.append_report_to_global_report(self.pattern_match_report)
        self.append_report_to_global_report(self.specific_check_report)

        return self.report

    def get_report_in_dict_form(self):
        """
        This method returns report in the form of dict object.
        Example report format:
        {'1':{'warning': [['label','invalid_label],
        ['formula','invalid_formula]], 'errors':[]},
        '4':{'warning':[['label','invalid_label']],'errors':[]},
        '19':{'warning':[],'errors':['Sample1','negative]}}
        """

        self.invalid_row_lst = self.report.row_number.unique()
        for row in zip(self.report[const.COLUMN_ROW],
                       self.report[const.COLUMN_NAME],
                       self.report[const.COLUMN_STATE]):
            invalid_data = self.select_warning_or_error(row[1], row[2])
            self.append_to_report(row[0], invalid_data)

    def append_to_report(self, row_number, invalid_data):
        """
        This method append each validation check result to report class
        variable.
        """
        if row_number not in self.report_in_dict_form:
            self.report_in_dict_form[row_number] = self.get_report_format()
        if invalid_data.type == const.VALIDATION_ERROR:
            self.is_error = True
            self.row_having_err.append(row_number)
            self.report_in_dict_form[row_number][invalid_data.type] \
                .append(invalid_data.value)
        else:
            self.row_having_warning.append(row_number)
            self.report_in_dict_form[row_number][invalid_data.type] \
                .append(invalid_data.value)


    @staticmethod
    def select_warning_or_error(column_name, state):
        """
        This method returns type of invalid data (i.e error or
        warning) and returns column name and state.
        :param column_name:
        :param state:
        :return: invalid_data type and value
        """
        invalid_data = namedtuple('invalid_data', 'type value')
        if state in const.WARNING_STATE:
            invalid_data.type = const.VALIDATION_WARNING
            invalid_data.value = [column_name, state]
        else:
            invalid_data.type = const.VALIDATION_ERROR
            invalid_data.value = [column_name, state]

        return invalid_data

    @staticmethod
    def get_report_format():
        """
        Returns a  dict object of predefined format.
        :return: report format
        """
        return {const.VALIDATION_ERROR: [],
                const.VALIDATION_WARNING: []}
